import { describe, expect, it } from "@jest/globals";
import { validate } from "../schema";

describe("schema", () => {
  it("Should allow literals", () => {
    expect(validate("Hello world")).toEqual([]);
    expect(validate(5)).toEqual([]);
  });

  it("Should allow function and operator calls", () => {
    expect(validate(["NOT", ["TRUE"]])).toEqual([]);
    expect(validate(["=", 1, 2])).toEqual([]);
    expect(validate(["TRUE"])).toEqual([]);
  });

  it("should allow field references", () => {
    expect(validate({ field: "myField" })).toEqual([]);
    expect(
      validate(["=", { field: "myField" }, { field: "myOtherField" }])
    ).toEqual([]);
  });

  it("Should disallow non-existent functions and operators", () => {
    expect(validate(["Santa Clause", 1])).toMatchInlineSnapshot(`
      Array [
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be string",
          "params": Object {
            "type": "string",
          },
          "schemaPath": "#/anyOf/0/anyOf/0/type",
        },
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be number",
          "params": Object {
            "type": "number",
          },
          "schemaPath": "#/anyOf/0/anyOf/1/type",
        },
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be boolean",
          "params": Object {
            "type": "boolean",
          },
          "schemaPath": "#/anyOf/0/anyOf/2/type",
        },
        Object {
          "instancePath": "",
          "keyword": "anyOf",
          "message": "must match a schema in anyOf",
          "params": Object {},
          "schemaPath": "#/anyOf/0/anyOf",
        },
        Object {
          "instancePath": "/0",
          "keyword": "enum",
          "message": "must be equal to one of the allowed values",
          "params": Object {
            "allowedValues": Array [
              "&",
              ">",
              "<",
              ">=",
              "<=",
              "=",
              "!=",
              "+",
              "-",
              "*",
              "/",
            ],
          },
          "schemaPath": "#/anyOf/1/items/0/enum",
        },
        Object {
          "instancePath": "/0",
          "keyword": "enum",
          "message": "must be equal to one of the allowed values",
          "params": Object {
            "allowedValues": Array [
              "ARRAYJOIN",
              "CONCATENATE",
              "ENCODE_URL_COMPONENT",
              "FIND",
              "LEFT",
              "LEN",
              "LOWER",
              "MID",
              "REPLACE",
              "REPT",
              "RIGHT",
              "SEARCH",
              "SUBSTITUTE",
              "T",
              "TRIM",
              "UPPER",
              "AND",
              "BLANK",
              "ERROR",
              "FALSE",
              "IF",
              "ISERROR",
              "NOT",
              "OR",
              "SWITCH",
              "TRUE",
              "XOR",
              "ABS",
              "AVERAGE",
              "CEILING",
              "COUNT",
              "COUNTA",
              "COUNTALL",
              "EVEN",
              "EXP",
              "FLOOR",
              "INT",
              "LOG",
              "MAX",
              "MIN",
              "MOD",
              "ODD",
              "POWER",
              "ROUND",
              "ROUNDDOWN",
              "ROUNDUP",
              "SQRT",
              "SUM",
              "VALUE",
              "CREATED_TIME",
              "DATEADD",
              "DATESTR",
              "DATETIME_DIFF",
              "DATETIME_FORMAT",
              "DATETIME_PARSE",
              "DAY",
              "HOUR",
              "IS_AFTER",
              "IS_BEFORE",
              "IS_SAME",
              "LAST_MODIFIED_TIME",
              "MINUTE",
              "MONTH",
              "NOW",
              "SECOND",
              "SET_LOCALE",
              "SET_TIMEZONE",
              "TIMESTR",
              "TONOW",
              "TODAY",
              "WEEKDAY",
              "WEEKNUM",
              "WORKDAY",
              "WORKDAY_DIFF",
              "YEAR",
              "ARRAYCOMPACT",
              "ARRAYFLATTEN",
              "ARRAYUNIQUE",
              "RECORD_ID",
              "REGEX_MATCH",
              "REGEX_EXTRACT",
              "REGEX_REPLACE",
            ],
          },
          "schemaPath": "#/anyOf/2/items/0/enum",
        },
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be object",
          "params": Object {
            "type": "object",
          },
          "schemaPath": "#/anyOf/3/type",
        },
        Object {
          "instancePath": "",
          "keyword": "anyOf",
          "message": "must match a schema in anyOf",
          "params": Object {},
          "schemaPath": "#/anyOf",
        },
      ]
    `);
    expect(validate(["@", 1, 2])).toMatchInlineSnapshot(`
      Array [
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be string",
          "params": Object {
            "type": "string",
          },
          "schemaPath": "#/anyOf/0/anyOf/0/type",
        },
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be number",
          "params": Object {
            "type": "number",
          },
          "schemaPath": "#/anyOf/0/anyOf/1/type",
        },
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be boolean",
          "params": Object {
            "type": "boolean",
          },
          "schemaPath": "#/anyOf/0/anyOf/2/type",
        },
        Object {
          "instancePath": "",
          "keyword": "anyOf",
          "message": "must match a schema in anyOf",
          "params": Object {},
          "schemaPath": "#/anyOf/0/anyOf",
        },
        Object {
          "instancePath": "/0",
          "keyword": "enum",
          "message": "must be equal to one of the allowed values",
          "params": Object {
            "allowedValues": Array [
              "&",
              ">",
              "<",
              ">=",
              "<=",
              "=",
              "!=",
              "+",
              "-",
              "*",
              "/",
            ],
          },
          "schemaPath": "#/anyOf/1/items/0/enum",
        },
        Object {
          "instancePath": "/0",
          "keyword": "enum",
          "message": "must be equal to one of the allowed values",
          "params": Object {
            "allowedValues": Array [
              "ARRAYJOIN",
              "CONCATENATE",
              "ENCODE_URL_COMPONENT",
              "FIND",
              "LEFT",
              "LEN",
              "LOWER",
              "MID",
              "REPLACE",
              "REPT",
              "RIGHT",
              "SEARCH",
              "SUBSTITUTE",
              "T",
              "TRIM",
              "UPPER",
              "AND",
              "BLANK",
              "ERROR",
              "FALSE",
              "IF",
              "ISERROR",
              "NOT",
              "OR",
              "SWITCH",
              "TRUE",
              "XOR",
              "ABS",
              "AVERAGE",
              "CEILING",
              "COUNT",
              "COUNTA",
              "COUNTALL",
              "EVEN",
              "EXP",
              "FLOOR",
              "INT",
              "LOG",
              "MAX",
              "MIN",
              "MOD",
              "ODD",
              "POWER",
              "ROUND",
              "ROUNDDOWN",
              "ROUNDUP",
              "SQRT",
              "SUM",
              "VALUE",
              "CREATED_TIME",
              "DATEADD",
              "DATESTR",
              "DATETIME_DIFF",
              "DATETIME_FORMAT",
              "DATETIME_PARSE",
              "DAY",
              "HOUR",
              "IS_AFTER",
              "IS_BEFORE",
              "IS_SAME",
              "LAST_MODIFIED_TIME",
              "MINUTE",
              "MONTH",
              "NOW",
              "SECOND",
              "SET_LOCALE",
              "SET_TIMEZONE",
              "TIMESTR",
              "TONOW",
              "TODAY",
              "WEEKDAY",
              "WEEKNUM",
              "WORKDAY",
              "WORKDAY_DIFF",
              "YEAR",
              "ARRAYCOMPACT",
              "ARRAYFLATTEN",
              "ARRAYUNIQUE",
              "RECORD_ID",
              "REGEX_MATCH",
              "REGEX_EXTRACT",
              "REGEX_REPLACE",
            ],
          },
          "schemaPath": "#/anyOf/2/items/0/enum",
        },
        Object {
          "instancePath": "",
          "keyword": "type",
          "message": "must be object",
          "params": Object {
            "type": "object",
          },
          "schemaPath": "#/anyOf/3/type",
        },
        Object {
          "instancePath": "",
          "keyword": "anyOf",
          "message": "must match a schema in anyOf",
          "params": Object {},
          "schemaPath": "#/anyOf",
        },
      ]
    `);
  });
});
